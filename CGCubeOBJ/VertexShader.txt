#version 400 core

uniform mat4 tranMat;
uniform mat4 viewMat;
uniform mat4 projMat;
uniform mat4 normMat;

in vec3 pos;
in vec3 col;
in vec3 nor;
in vec2 tex;

//uniform vec3 lightPos;
uniform vec3 ambientColor;

uniform vec3 lightPosW;
uniform vec3 lightCol;
uniform float shinyN;

out vec3 v_color;
out vec2 texCoord;

out vec3 c_nor;
out vec3 o_nor;
out vec3 v_pos;

uniform int isShadowV;
uniform int isGraud; 
uniform int isTex;

uniform sampler2D myTex;

void main()
{	
	//일반
	vec4 v_pos4 = viewMat*tranMat*vec4(pos,1.0);
	gl_Position = projMat*v_pos4;
	v_pos = vec3(projMat*v_pos4);
	gl_PointSize = 10.0f;
	
	texCoord = tex;
	
	if(isShadowV==0){
		gl_Position = projMat*viewMat*tranMat*vec4(pos,1.0);
	}
	else if(isShadowV == 1){
		//if(pos == lightPos){
		//	gl_Position = projMat*viewMat*vec4(pos,1.0);
		//}
		gl_Position = projMat*viewMat*tranMat*vec4(pos,1.0);
	}
	//1. 포지션 변환해놓고 
	
	//노말에 회전*뷰를 inverse 하고 transpose해준거 곱.
	vec4 v_nor4 = normMat*vec4(nor,1.0f);
	//vec3 col_nor = vec3((nor.x+1.0f)/2,(nor.y+1.0f)/2,(nor.z+1.0f)/2);
	c_nor = vec3((v_nor4.x+1.0f)/2,(v_nor4.y+1.0f)/2,(v_nor4.z+1.0f)/2);//노말이 잘 나오는지 확인요.
	
	if(isGraud==0){
		o_nor = vec3(v_nor4.x, v_nor4.y, v_nor4.z);
		v_color = col;
	}
	else if(isGraud==1){
		vec3 g_nor = vec3(v_nor4.x, v_nor4.y, v_nor4.z);
		vec4 lightPos4 = vec4(lightPosW,1.0);
		vec3 lightPosV = vec3(/*viewMat*/lightPos4);
		vec3 lightDir = normalize(lightPosV-v_pos);

		vec4 tex= texture(myTex,texCoord);
			vec3 tex_color = vec3(tex.xyz);
		vec3 p_color;
		if(isTex == 0)
			p_color = col;
		else if(isTex==1)
			p_color = tex_color;

		//엠비언트
		vec3 ambient_color = vec3(0.2,0.2,0.2)*p_color;

		//디퓨즈
		float diffuse = dot(g_nor,lightDir);	
		if(diffuse < 0){
			diffuse = 0;
		}
		vec3 diffuse_color = vec3(0,0,0);
		diffuse_color = diffuse*p_color*lightCol;
		
		//스펙큘러
		vec3 reflectDir = reflect(-lightDir,g_nor);
		vec3 viewDir = normalize(-v_pos);
		float specular = pow(dot(reflectDir,viewDir),shinyN);
		if(specular<0.0)
			specular = 0.0;
		vec3 specular_color = specular*lightCol;
		if(isShadowV==1){
			v_color = vec3(0.0,0.5,1.0);
		}else{
			v_color = ambient_color + specular_color + diffuse_color;
		}
	}
}